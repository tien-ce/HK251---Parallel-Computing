import numpy as np
import matplotlib.pyplot as plt
import sys
# --- Configuration (Gi·ªØ nguy√™n) ---
INPUT_FILE = 'input/heat_matrix.csv'  
OUTPUT_FILE = 'output/output.csv'      
DELIMITER = ','                 
# ... (Ph·∫ßn code ch√≠nh kh√¥ng thay ƒë·ªïi)
# ------------------------------------

def get_center_submatrix(matrix, target_rows, target_cols):
    """
    Tr√≠ch xu·∫•t ma tr·∫≠n con t·ª´ t√¢m c·ªßa ma tr·∫≠n g·ªëc.

    Tham s·ªë:
    - matrix (np.ndarray): Ma tr·∫≠n g·ªëc.
    - target_rows (int): S·ªë h√†ng mong mu·ªën c·ªßa ma tr·∫≠n con (R).
    - target_cols (int): S·ªë c·ªôt mong mu·ªën c·ªßa ma tr·∫≠n con (C).

    Tr·∫£ v·ªÅ:
    - np.ndarray: Ma tr·∫≠n con ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t.
    """
    if target_rows <= 0 or target_cols <= 0:
        raise ValueError("S·ªë h√†ng v√† s·ªë c·ªôt tr·ª±c quan h√≥a ph·∫£i l·ªõn h∆°n 0.")

    total_rows, total_cols = matrix.shape

    # 1. X√°c ƒë·ªãnh s·ªë h√†ng v√† c·ªôt th·ª±c t·∫ø (c·∫Øt b·ªõt n·∫øu l·ªõn h∆°n ma tr·∫≠n g·ªëc)
    R = min(target_rows, total_rows)
    C = min(target_cols, total_cols)

    # 2. T√≠nh to√°n ƒëi·ªÉm b·∫Øt ƒë·∫ßu (start_row, start_col)
    # V·ªã tr√≠ b·∫Øt ƒë·∫ßu = (T·ªïng s·ªë - K√≠ch th∆∞·ªõc mong mu·ªën) // 2
    
    # H√†ng
    start_row = (total_rows - R) // 2
    end_row = start_row + R
    
    # C·ªôt
    start_col = (total_cols - C) // 2
    end_col = start_col + C

    # Tr√≠ch xu·∫•t ma tr·∫≠n con
    submatrix = matrix[start_row:end_row, start_col:end_col]
    
    # Ghi nh·∫≠n c√°c ch·ªâ s·ªë g·ªëc ƒë·ªÉ hi·ªÉn th·ªã tr√™n bi·ªÉu ƒë·ªì
    # ƒê√¢y l√† c√°c ch·ªâ s·ªë *b·∫Øt ƒë·∫ßu* v√† *k·∫øt th√∫c* c·ªßa khu v·ª±c ƒë∆∞·ª£c hi·ªÉn th·ªã
    index_range = (start_row, end_row - 1, start_col, end_col - 1)
    
    return submatrix, index_range

# --- H√†m tr·ª±c quan h√≥a ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªïi ---

def visualize_two_matrices(input_file, output_file, visual_rows=None, visual_cols=None, delimiter=','):
    """
    ƒê·ªçc hai file ma tr·∫≠n, tr·ª±c quan h√≥a ch√∫ng c·∫°nh nhau d∆∞·ªõi d·∫°ng b·∫£n ƒë·ªì nhi·ªát (heatmap),
    v·ªõi kh·∫£ nƒÉng ch·ªâ hi·ªÉn th·ªã ma tr·∫≠n con tr√≠ch xu·∫•t t·ª´ t√¢m.

    Tham s·ªë:
    - visual_rows (int, optional): S·ªë h√†ng c·ªßa ma tr·∫≠n con t·ª´ t√¢m mu·ªën hi·ªÉn th·ªã.
    - visual_cols (int, optional): S·ªë c·ªôt c·ªßa ma tr·∫≠n con t·ª´ t√¢m mu·ªën hi·ªÉn th·ªã.
    """
    
    data = {}
    
    # 1. Load data for both files
    # (Ph·∫ßn n√†y gi·ªØ nguy√™n, nh∆∞ng t√¥i s·∫Ω ƒë∆∞a logic tr√≠ch xu·∫•t ma tr·∫≠n con v√†o sau khi load)
    try:
        data['Input_Raw'] = np.loadtxt(input_file, delimiter=delimiter)
        print(f"‚úÖ Loaded input matrix from {input_file}")
    except FileNotFoundError:
        print(f"‚ùå Error: Input file not found at {input_file}")
        return
    except Exception as e:
        print(f"‚ùå Error loading input data: {e}")
        return

    try:
        data['Output_Raw'] = np.loadtxt(output_file, delimiter=delimiter)
        print(f"‚úÖ Loaded output matrix from {output_file}")
    except FileNotFoundError:
        print(f"‚ùå Error: Output file not found at {output_file}")
        return
    except Exception as e:
        print(f"‚ùå Error loading output data: {e}")
        return
        
    # **2. Tr√≠ch xu·∫•t ma tr·∫≠n con (n·∫øu y√™u c·∫ßu)**
    if visual_rows is not None and visual_cols is not None:
        try:
            # X·ª≠ l√Ω ma tr·∫≠n Input
            data['Input'], (r_start, r_end, c_start, c_end) = \
                get_center_submatrix(data['Input_Raw'], visual_rows, visual_cols)
            
            # X·ª≠ l√Ω ma tr·∫≠n Output
            data['Output'], _ = \
                get_center_submatrix(data['Output_Raw'], visual_rows, visual_cols)
            
            print(f"‚ú® Visualizing a sub-matrix of size {data['Input'].shape} from center.")
            print(f"   (Original Indices: Rows {r_start} to {r_end}, Cols {c_start} to {c_end})")
            
            # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ bi·ªÉu ƒë·ªì ƒë·ªÉ ph·∫£n √°nh vi·ªác tr√≠ch xu·∫•t
            subtitle = f'Heat Simulation: Input vs. Final Output (Center Sub-matrix {data["Input"].shape})'
            
        except ValueError as e:
            print(f"‚ùå Error in center submatrix calculation: {e}")
            return
    else:
        # S·ª≠ d·ª•ng to√†n b·ªô ma tr·∫≠n n·∫øu kh√¥ng c√≥ tham s·ªë tr√≠ch xu·∫•t
        data['Input'] = data['Input_Raw']
        data['Output'] = data['Output_Raw']
        subtitle = 'Heat Simulation: Input vs. Final Output (Full Matrix)'
        r_start, c_start = 0, 0 # Ch·ªâ s·ªë b·∫Øt ƒë·∫ßu l√† 0
        
    # X√°c ƒë·ªãnh ph·∫°m vi m√†u chung
    all_values = np.concatenate([data['Input'].flatten(), data['Output'].flatten()])
    v_min = all_values.min()
    v_max = all_values.max()
    
    # 3. Create and configure the figure
    fig, axes = plt.subplots(1, 2, figsize=(14, 6))

    # 4. Plot the Input Matrix (Left Subplot)
    im0 = axes[0].imshow(data['Input'], cmap='hot', interpolation='nearest', 
                         vmin=v_min, vmax=v_max, aspect='auto')
    
    # **ƒêi·ªÅu ch·ªânh nh√£n tr·ª•c ƒë·ªÉ hi·ªÉn th·ªã ch·ªâ s·ªë g·ªëc**
    rows, cols = data['Input'].shape
    axes[0].set_xticks(np.arange(0, cols, max(1, cols // 5))) # Hi·ªÉn th·ªã 5-6 ticks
    axes[0].set_xticklabels(np.arange(c_start, c_start + cols, max(1, cols // 5)))
    axes[0].set_yticks(np.arange(0, rows, max(1, rows // 5)))
    axes[0].set_yticklabels(np.arange(r_start, r_start + rows, max(1, rows // 5)))
    
    axes[0].set_title(f'Initial Heat Map (Input)')
    axes[0].set_xlabel(f'Column Index (Original: {c_start} to {c_start + cols - 1})')
    axes[0].set_ylabel(f'Row Index (Original: {r_start} to {r_start + rows - 1})')
    
    # 5. Plot the Output Matrix (Right Subplot)
    im1 = axes[1].imshow(data['Output'], cmap='hot', interpolation='nearest', 
                         vmin=v_min, vmax=v_max, aspect='auto')

    # **ƒêi·ªÅu ch·ªânh nh√£n tr·ª•c cho ma tr·∫≠n Output**
    axes[1].set_xticks(np.arange(0, cols, max(1, cols // 5)))
    axes[1].set_xticklabels(np.arange(c_start, c_start + cols, max(1, cols // 5)))
    axes[1].set_yticks(np.arange(0, rows, max(1, rows // 5)))
    axes[1].set_yticklabels(np.arange(r_start, r_start + rows, max(1, rows // 5)))

    axes[1].set_title(f'Final Heat Map (Output after simulation)')
    axes[1].set_xlabel(f'Column Index (Original: {c_start} to {c_start + cols - 1})')
    axes[1].set_ylabel(f'Row Index (Original: {r_start} to {r_start + rows - 1})')

    # 6. Add a single color bar for both plots
    fig.subplots_adjust(right=0.85)
    cbar_ax = fig.add_axes([0.90, 0.15, 0.03, 0.7])
    fig.colorbar(im1, cax=cbar_ax).set_label('Temperature Value')

    fig.suptitle(subtitle, fontsize=16)
    
    # 7. Display the figure
    print("üöÄ Displaying visualization. Press Ctrl+C to close the window and exit the script.")
    plt.show()

# ----------------------------------------------------------------------
# üåü KEY MODIFICATION: Add Signal Handling in the main block
# ----------------------------------------------------------------------

if __name__ == '__main__':
    # --- Configuration (V√≠ d·ª•) ---
    
    # N·∫øu b·∫°n mu·ªën tr·ª±c quan h√≥a ma tr·∫≠n con 400x400 t·ª´ t√¢m
    TARGET_ROWS = 400
    TARGET_COLS = 400
    
    try:
        # G·ªçi h√†m v·ªõi tham s·ªë k√≠ch th∆∞·ªõc ma tr·∫≠n con
        # Trong tr∆∞·ªùng h·ª£p kh√¥ng c√≥ file, h√†m s·∫Ω b√°o l·ªói FileNotFoundError
        # ƒê·ªÉ ch·∫°y th·ª≠ nghi·ªám, b·∫°n c·∫ßn ƒë·∫£m b·∫£o c√°c file n√†y t·ªìn t·∫°i ho·∫∑c ch·∫°y h√†m v·ªõi tham s·ªë None
        
        # V√≠ d·ª• 1: Tr·ª±c quan h√≥a ma tr·∫≠n con 400x400
        visualize_two_matrices(INPUT_FILE, OUTPUT_FILE, visual_rows=TARGET_ROWS, visual_cols=TARGET_COLS)

        # V√≠ d·ª• 2: Tr·ª±c quan h√≥a to√†n b·ªô ma tr·∫≠n (n·∫øu file t·ªìn t·∫°i)
        # visualize_two_matrices(INPUT_FILE, OUTPUT_FILE)

        # # V√≠ d·ª• 3: Gi·∫£ l·∫≠p ma tr·∫≠n v√† ch·∫°y ƒë·ªÉ ki·ªÉm tra logic tr√≠ch xu·∫•t
        # print("\n--- Testing Sub-matrix Logic ---")
        # # T·∫°o ma tr·∫≠n gi·∫£ 10x10
        # mock_input = np.arange(100).reshape(10, 10) 
        # # Tr√≠ch xu·∫•t 4x6 (h√†ng x c·ªôt) t·ª´ t√¢m
        # sub_matrix, index_range = get_center_submatrix(mock_input, 4, 6)
        # print(f"Original 10x10 matrix:\n{mock_input}")
        # print(f"\nSub-matrix 4x6 from center (Rows {index_range[0]} to {index_range[1]}, Cols {index_range[2]} to {index_range[3]}):\n{sub_matrix}")
        
        # N·∫øu ma tr·∫≠n g·ªëc (10x10) kh√¥ng t·ªìn t·∫°i file, b·∫°n c√≥ th·ªÉ t·∫°m th·ªùi g·ªçi
        # visualize_two_matrices(INPUT_FILE, OUTPUT_FILE, visual_rows=400, visual_cols=400)
        # ƒë·ªÉ ki·ªÉm tra logic l·ªói file

    except KeyboardInterrupt:
        # This block catches the Ctrl+C signal
        print("\n\nüõë Keyboard interrupt received. Closing visualization and exiting program.")
        plt.close('all') 
        sys.exit(0)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)